"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "afterRead", {
    enumerable: true,
    get: function() {
        return afterRead;
    }
});
const _deepCopyObject = require("../../../utilities/deepCopyObject");
const _traverseFields = require("./traverseFields");
async function afterRead(args) {
    const { collection, context, currentDepth: incomingCurrentDepth, depth: incomingDepth, doc: incomingDoc, draft, fallbackLocale, findMany, flattenLocales = true, global, locale, overrideAccess, req, showHiddenFields } = args;
    const doc = (0, _deepCopyObject.deepCopyObject)(incomingDoc);
    const fieldPromises = [];
    const populationPromises = [];
    let depth = incomingDepth || incomingDepth === 0 ? parseInt(String(incomingDepth), 10) : req.payload.config.defaultDepth;
    if (depth > req.payload.config.maxDepth) depth = req.payload.config.maxDepth;
    const currentDepth = incomingCurrentDepth || 1;
    (0, _traverseFields.traverseFields)({
        collection,
        context,
        currentDepth,
        depth,
        doc,
        draft,
        fallbackLocale,
        fieldPromises,
        fields: collection?.fields || global?.fields,
        findMany,
        flattenLocales,
        global,
        locale,
        overrideAccess,
        populationPromises,
        req,
        showHiddenFields,
        siblingDoc: doc
    });
    await Promise.all(fieldPromises);
    await Promise.all(populationPromises);
    return doc;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9maWVsZHMvaG9va3MvYWZ0ZXJSZWFkL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkR2xvYmFsQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9jb25maWcvdHlwZXMnXG5cbmltcG9ydCB7IGRlZXBDb3B5T2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2RlZXBDb3B5T2JqZWN0J1xuaW1wb3J0IHsgdHJhdmVyc2VGaWVsZHMgfSBmcm9tICcuL3RyYXZlcnNlRmllbGRzJ1xuXG50eXBlIEFyZ3MgPSB7XG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWcgfCBudWxsXG4gIGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0XG4gIGN1cnJlbnREZXB0aD86IG51bWJlclxuICBkZXB0aDogbnVtYmVyXG4gIGRvYzogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgZHJhZnQ6IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU6IG51bGwgfCBzdHJpbmdcbiAgZmluZE1hbnk/OiBib29sZWFuXG4gIGZsYXR0ZW5Mb2NhbGVzPzogYm9vbGVhblxuICBnbG9iYWw6IFNhbml0aXplZEdsb2JhbENvbmZpZyB8IG51bGxcbiAgbG9jYWxlOiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M6IGJvb2xlYW5cbiAgcmVxOiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzOiBib29sZWFuXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZnRlclJlYWQ8VCA9IGFueT4oYXJnczogQXJncyk6IFByb21pc2U8VD4ge1xuICBjb25zdCB7XG4gICAgY29sbGVjdGlvbixcbiAgICBjb250ZXh0LFxuICAgIGN1cnJlbnREZXB0aDogaW5jb21pbmdDdXJyZW50RGVwdGgsXG4gICAgZGVwdGg6IGluY29taW5nRGVwdGgsXG4gICAgZG9jOiBpbmNvbWluZ0RvYyxcbiAgICBkcmFmdCxcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBmaW5kTWFueSxcbiAgICBmbGF0dGVuTG9jYWxlcyA9IHRydWUsXG4gICAgZ2xvYmFsLFxuICAgIGxvY2FsZSxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSA9IGFyZ3NcblxuICBjb25zdCBkb2MgPSBkZWVwQ29weU9iamVjdChpbmNvbWluZ0RvYylcbiAgY29uc3QgZmllbGRQcm9taXNlcyA9IFtdXG4gIGNvbnN0IHBvcHVsYXRpb25Qcm9taXNlcyA9IFtdXG5cbiAgbGV0IGRlcHRoID1cbiAgICBpbmNvbWluZ0RlcHRoIHx8IGluY29taW5nRGVwdGggPT09IDBcbiAgICAgID8gcGFyc2VJbnQoU3RyaW5nKGluY29taW5nRGVwdGgpLCAxMClcbiAgICAgIDogcmVxLnBheWxvYWQuY29uZmlnLmRlZmF1bHREZXB0aFxuICBpZiAoZGVwdGggPiByZXEucGF5bG9hZC5jb25maWcubWF4RGVwdGgpIGRlcHRoID0gcmVxLnBheWxvYWQuY29uZmlnLm1heERlcHRoXG5cbiAgY29uc3QgY3VycmVudERlcHRoID0gaW5jb21pbmdDdXJyZW50RGVwdGggfHwgMVxuXG4gIHRyYXZlcnNlRmllbGRzKHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGNvbnRleHQsXG4gICAgY3VycmVudERlcHRoLFxuICAgIGRlcHRoLFxuICAgIGRvYyxcbiAgICBkcmFmdCxcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBmaWVsZFByb21pc2VzLFxuICAgIGZpZWxkczogY29sbGVjdGlvbj8uZmllbGRzIHx8IGdsb2JhbD8uZmllbGRzLFxuICAgIGZpbmRNYW55LFxuICAgIGZsYXR0ZW5Mb2NhbGVzLFxuICAgIGdsb2JhbCxcbiAgICBsb2NhbGUsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcG9wdWxhdGlvblByb21pc2VzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNpYmxpbmdEb2M6IGRvYyxcbiAgfSlcblxuICBhd2FpdCBQcm9taXNlLmFsbChmaWVsZFByb21pc2VzKVxuICBhd2FpdCBQcm9taXNlLmFsbChwb3B1bGF0aW9uUHJvbWlzZXMpXG5cbiAgcmV0dXJuIGRvY1xufVxuIl0sIm5hbWVzIjpbImFmdGVyUmVhZCIsImFyZ3MiLCJjb2xsZWN0aW9uIiwiY29udGV4dCIsImN1cnJlbnREZXB0aCIsImluY29taW5nQ3VycmVudERlcHRoIiwiZGVwdGgiLCJpbmNvbWluZ0RlcHRoIiwiZG9jIiwiaW5jb21pbmdEb2MiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwiZmluZE1hbnkiLCJmbGF0dGVuTG9jYWxlcyIsImdsb2JhbCIsImxvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsImRlZXBDb3B5T2JqZWN0IiwiZmllbGRQcm9taXNlcyIsInBvcHVsYXRpb25Qcm9taXNlcyIsInBhcnNlSW50IiwiU3RyaW5nIiwicGF5bG9hZCIsImNvbmZpZyIsImRlZmF1bHREZXB0aCIsIm1heERlcHRoIiwidHJhdmVyc2VGaWVsZHMiLCJmaWVsZHMiLCJzaWJsaW5nRG9jIiwiUHJvbWlzZSIsImFsbCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF3QnNCQTs7O2VBQUFBOzs7Z0NBcEJTO2dDQUNBO0FBbUJ4QixlQUFlQSxVQUFtQkMsSUFBVTtJQUNqRCxNQUFNLEVBQ0pDLFVBQVUsRUFDVkMsT0FBTyxFQUNQQyxjQUFjQyxvQkFBb0IsRUFDbENDLE9BQU9DLGFBQWEsRUFDcEJDLEtBQUtDLFdBQVcsRUFDaEJDLEtBQUssRUFDTEMsY0FBYyxFQUNkQyxRQUFRLEVBQ1JDLGlCQUFpQixJQUFJLEVBQ3JCQyxNQUFNLEVBQ05DLE1BQU0sRUFDTkMsY0FBYyxFQUNkQyxHQUFHLEVBQ0hDLGdCQUFnQixFQUNqQixHQUFHakI7SUFFSixNQUFNTyxNQUFNVyxJQUFBQSw4QkFBYyxFQUFDVjtJQUMzQixNQUFNVyxnQkFBZ0IsRUFBRTtJQUN4QixNQUFNQyxxQkFBcUIsRUFBRTtJQUU3QixJQUFJZixRQUNGQyxpQkFBaUJBLGtCQUFrQixJQUMvQmUsU0FBU0MsT0FBT2hCLGdCQUFnQixNQUNoQ1UsSUFBSU8sT0FBTyxDQUFDQyxNQUFNLENBQUNDLFlBQVk7SUFDckMsSUFBSXBCLFFBQVFXLElBQUlPLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxRQUFRLEVBQUVyQixRQUFRVyxJQUFJTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsUUFBUTtJQUU1RSxNQUFNdkIsZUFBZUMsd0JBQXdCO0lBRTdDdUIsSUFBQUEsOEJBQWMsRUFBQztRQUNiMUI7UUFDQUM7UUFDQUM7UUFDQUU7UUFDQUU7UUFDQUU7UUFDQUM7UUFDQVM7UUFDQVMsUUFBUTNCLFlBQVkyQixVQUFVZixRQUFRZTtRQUN0Q2pCO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FLO1FBQ0FKO1FBQ0FDO1FBQ0FZLFlBQVl0QjtJQUNkO0lBRUEsTUFBTXVCLFFBQVFDLEdBQUcsQ0FBQ1o7SUFDbEIsTUFBTVcsUUFBUUMsR0FBRyxDQUFDWDtJQUVsQixPQUFPYjtBQUNUIn0=