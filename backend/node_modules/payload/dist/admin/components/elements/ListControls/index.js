"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ListControls", {
    enumerable: true,
    get: function() {
        return ListControls;
    }
});
const _windowinfo = require("@faceless-ui/window-info");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactanimateheight = /*#__PURE__*/ _interop_require_default(require("react-animate-height"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../fields/config/types");
const _getTranslation = require("../../../../utilities/getTranslation");
const _Chevron = /*#__PURE__*/ _interop_require_default(require("../../icons/Chevron"));
const _SearchParams = require("../../utilities/SearchParams");
const _ColumnSelector = /*#__PURE__*/ _interop_require_default(require("../ColumnSelector"));
const _DeleteMany = /*#__PURE__*/ _interop_require_default(require("../DeleteMany"));
const _EditMany = /*#__PURE__*/ _interop_require_default(require("../EditMany"));
const _Pill = /*#__PURE__*/ _interop_require_default(require("../Pill"));
const _PublishMany = /*#__PURE__*/ _interop_require_default(require("../PublishMany"));
const _SearchFilter = /*#__PURE__*/ _interop_require_default(require("../SearchFilter"));
const _SortComplex = /*#__PURE__*/ _interop_require_default(require("../SortComplex"));
const _UnpublishMany = /*#__PURE__*/ _interop_require_default(require("../UnpublishMany"));
const _WhereBuilder = /*#__PURE__*/ _interop_require_default(require("../WhereBuilder"));
const _validateWhereQuery = /*#__PURE__*/ _interop_require_default(require("../WhereBuilder/validateWhereQuery"));
const _getTextFieldsToBeSearched = require("./getTextFieldsToBeSearched");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'list-controls';
const ListControls = (props)=>{
    const { collection: { admin: { listSearchableFields }, fields }, collection, enableColumns = true, enableSort = false, handleSearchChange, handleSortChange, handleWhereChange, modifySearchQuery = true, resetParams, titleField } = props;
    const params = (0, _SearchParams.useSearchParams)();
    const shouldInitializeWhereOpened = (0, _validateWhereQuery.default)(params?.where);
    const hasWhereParam = _react.default.useRef(Boolean(params?.where));
    const [textFieldsToBeSearched, setFieldsToBeSearched] = (0, _react.useState)((0, _getTextFieldsToBeSearched.getTextFieldsToBeSearched)(listSearchableFields, fields));
    const [visibleDrawer, setVisibleDrawer] = (0, _react.useState)(shouldInitializeWhereOpened ? 'where' : undefined);
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { breakpoints: { s: smallBreak } } = (0, _windowinfo.useWindowInfo)();
    _react.default.useEffect(()=>{
        setFieldsToBeSearched((0, _getTextFieldsToBeSearched.getTextFieldsToBeSearched)(listSearchableFields, fields));
    }, [
        listSearchableFields,
        fields
    ]);
    _react.default.useEffect(()=>{
        if (hasWhereParam.current && !params?.where) {
            setVisibleDrawer(undefined);
            hasWhereParam.current = false;
        } else if (params?.where) {
            hasWhereParam.current = true;
        }
    }, [
        setVisibleDrawer,
        params?.where
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement(_SearchFilter.default, {
        fieldLabel: (titleField && (0, _getTranslation.getTranslation)(titleField.label || titleField.name, i18n)) ?? undefined,
        fieldName: titleField && (0, _types.fieldAffectsData)(titleField) ? titleField.name : undefined,
        handleChange: handleSearchChange,
        listSearchableFields: textFieldsToBeSearched,
        modifySearchQuery: modifySearchQuery
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__buttons`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__buttons-wrap`
    }, !smallBreak && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_EditMany.default, {
        collection: collection,
        resetParams: resetParams
    }), /*#__PURE__*/ _react.default.createElement(_PublishMany.default, {
        collection: collection,
        resetParams: resetParams
    }), /*#__PURE__*/ _react.default.createElement(_UnpublishMany.default, {
        collection: collection,
        resetParams: resetParams
    }), /*#__PURE__*/ _react.default.createElement(_DeleteMany.default, {
        collection: collection,
        resetParams: resetParams
    })), enableColumns && /*#__PURE__*/ _react.default.createElement(_Pill.default, {
        "aria-controls": `${baseClass}-columns`,
        "aria-expanded": visibleDrawer === 'columns',
        className: `${baseClass}__toggle-columns ${visibleDrawer === 'columns' ? `${baseClass}__buttons-active` : ''}`,
        icon: /*#__PURE__*/ _react.default.createElement(_Chevron.default, null),
        onClick: ()=>setVisibleDrawer(visibleDrawer !== 'columns' ? 'columns' : undefined),
        pillStyle: "light"
    }, t('columns')), /*#__PURE__*/ _react.default.createElement(_Pill.default, {
        "aria-controls": `${baseClass}-where`,
        "aria-expanded": visibleDrawer === 'where',
        className: `${baseClass}__toggle-where ${visibleDrawer === 'where' ? `${baseClass}__buttons-active` : ''}`,
        icon: /*#__PURE__*/ _react.default.createElement(_Chevron.default, null),
        onClick: ()=>setVisibleDrawer(visibleDrawer !== 'where' ? 'where' : undefined),
        pillStyle: "light"
    }, t('filters')), enableSort && /*#__PURE__*/ _react.default.createElement(_Pill.default, {
        "aria-controls": `${baseClass}-sort`,
        "aria-expanded": visibleDrawer === 'sort',
        className: `${baseClass}__toggle-sort`,
        icon: /*#__PURE__*/ _react.default.createElement(_Chevron.default, null),
        onClick: ()=>setVisibleDrawer(visibleDrawer !== 'sort' ? 'sort' : undefined),
        pillStyle: "light"
    }, t('sort'))))), enableColumns && /*#__PURE__*/ _react.default.createElement(_reactanimateheight.default, {
        className: `${baseClass}__columns`,
        height: visibleDrawer === 'columns' ? 'auto' : 0,
        id: `${baseClass}-columns`
    }, /*#__PURE__*/ _react.default.createElement(_ColumnSelector.default, {
        slug: collection.slug
    })), /*#__PURE__*/ _react.default.createElement(_reactanimateheight.default, {
        className: `${baseClass}__where`,
        height: visibleDrawer === 'where' ? 'auto' : 0,
        id: `${baseClass}-where`
    }, /*#__PURE__*/ _react.default.createElement(_WhereBuilder.default, {
        collection: collection,
        handleChange: handleWhereChange,
        key: String(hasWhereParam.current && !params?.where),
        modifySearchQuery: modifySearchQuery
    })), enableSort && /*#__PURE__*/ _react.default.createElement(_reactanimateheight.default, {
        className: `${baseClass}__sort`,
        height: visibleDrawer === 'sort' ? 'auto' : 0,
        id: `${baseClass}-sort`
    }, /*#__PURE__*/ _react.default.createElement(_SortComplex.default, {
        collection: collection,
        handleChange: handleSortChange,
        modifySearchQuery: modifySearchQuery
    })));
};

//# sourceMappingURL=data:application/json;base64,