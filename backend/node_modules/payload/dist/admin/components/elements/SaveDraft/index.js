"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SaveDraft", {
    enumerable: true,
    get: function() {
        return SaveDraft;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _useHotkey = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useHotkey"));
const _context = require("../../forms/Form/context");
const _Submit = /*#__PURE__*/ _interop_require_default(require("../../forms/Submit"));
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _EditDepth = require("../../utilities/EditDepth");
const _Locale = require("../../utilities/Locale");
const _OperationProvider = require("../../utilities/OperationProvider");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'save-draft';
const DefaultSaveDraftButton = ({ disabled, label, saveDraft })=>{
    const ref = (0, _react.useRef)(null);
    const editDepth = (0, _EditDepth.useEditDepth)();
    (0, _useHotkey.default)({
        cmdCtrlKey: true,
        editDepth,
        keyCodes: [
            's'
        ]
    }, (e)=>{
        e.preventDefault();
        e.stopPropagation();
        if (disabled) {
            return;
        }
        if (ref?.current) {
            ref.current.click();
        }
    });
    return /*#__PURE__*/ _react.default.createElement(_Submit.default, {
        buttonId: "action-save-draft",
        buttonStyle: "secondary",
        className: baseClass,
        disabled: disabled,
        onClick: saveDraft,
        ref: ref,
        size: "small",
        type: "button"
    }, label);
};
const SaveDraft = ({ CustomComponent })=>{
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { submit } = (0, _context.useForm)();
    const { id, collection, global } = (0, _DocumentInfo.useDocumentInfo)();
    const operation = (0, _OperationProvider.useOperation)();
    const modified = (0, _context.useFormModified)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { t } = (0, _reacti18next.useTranslation)('version');
    const canSaveDraft = operation === 'update' && modified;
    const saveDraft = (0, _react.useCallback)(async ()=>{
        const search = `?locale=${locale}&depth=0&fallback-locale=null&draft=true`;
        let action;
        let method = 'POST';
        if (collection) {
            action = `${serverURL}${api}/${collection.slug}${id ? `/${id}` : ''}${search}`;
            if (id) method = 'PATCH';
        }
        if (global) {
            action = `${serverURL}${api}/globals/${global.slug}${search}`;
        }
        await submit({
            action,
            method,
            overrides: {
                _status: 'draft'
            },
            skipValidation: true
        });
    }, [
        submit,
        collection,
        global,
        serverURL,
        api,
        locale,
        id
    ]);
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomComponent,
        DefaultComponent: DefaultSaveDraftButton,
        componentProps: {
            DefaultButton: DefaultSaveDraftButton,
            disabled: !canSaveDraft,
            label: t('saveDraft'),
            saveDraft
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL1NhdmVEcmFmdC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHVzZUhvdGtleSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VIb3RrZXknXG5pbXBvcnQgeyB1c2VGb3JtLCB1c2VGb3JtTW9kaWZpZWQgfSBmcm9tICcuLi8uLi9mb3Jtcy9Gb3JtL2NvbnRleHQnXG5pbXBvcnQgRm9ybVN1Ym1pdCBmcm9tICcuLi8uLi9mb3Jtcy9TdWJtaXQnXG5pbXBvcnQgeyB1c2VDb25maWcgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvQ29uZmlnJ1xuaW1wb3J0IHsgdXNlRG9jdW1lbnRJbmZvIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0RvY3VtZW50SW5mbydcbmltcG9ydCB7IHVzZUVkaXREZXB0aCB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9FZGl0RGVwdGgnXG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvTG9jYWxlJ1xuaW1wb3J0IHsgdXNlT3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL09wZXJhdGlvblByb3ZpZGVyJ1xuaW1wb3J0IFJlbmRlckN1c3RvbUNvbXBvbmVudCBmcm9tICcuLi8uLi91dGlsaXRpZXMvUmVuZGVyQ3VzdG9tQ29tcG9uZW50J1xuXG5jb25zdCBiYXNlQ2xhc3MgPSAnc2F2ZS1kcmFmdCdcblxuZXhwb3J0IHR5cGUgQ3VzdG9tU2F2ZURyYWZ0QnV0dG9uUHJvcHMgPSBSZWFjdC5Db21wb25lbnRUeXBlPFxuICBEZWZhdWx0U2F2ZURyYWZ0QnV0dG9uUHJvcHMgJiB7XG4gICAgRGVmYXVsdEJ1dHRvbjogUmVhY3QuQ29tcG9uZW50VHlwZTxEZWZhdWx0U2F2ZURyYWZ0QnV0dG9uUHJvcHM+XG4gIH1cbj5cbmV4cG9ydCB0eXBlIERlZmF1bHRTYXZlRHJhZnRCdXR0b25Qcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGJvb2xlYW5cbiAgbGFiZWw6IHN0cmluZ1xuICBzYXZlRHJhZnQ6ICgpID0+IHZvaWRcbn1cbmNvbnN0IERlZmF1bHRTYXZlRHJhZnRCdXR0b246IFJlYWN0LkZDPERlZmF1bHRTYXZlRHJhZnRCdXR0b25Qcm9wcz4gPSAoe1xuICBkaXNhYmxlZCxcbiAgbGFiZWwsXG4gIHNhdmVEcmFmdCxcbn0pID0+IHtcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxCdXR0b25FbGVtZW50PihudWxsKVxuICBjb25zdCBlZGl0RGVwdGggPSB1c2VFZGl0RGVwdGgoKVxuXG4gIHVzZUhvdGtleSh7IGNtZEN0cmxLZXk6IHRydWUsIGVkaXREZXB0aCwga2V5Q29kZXM6IFsncyddIH0sIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocmVmPy5jdXJyZW50KSB7XG4gICAgICByZWYuY3VycmVudC5jbGljaygpXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPEZvcm1TdWJtaXRcbiAgICAgIGJ1dHRvbklkPVwiYWN0aW9uLXNhdmUtZHJhZnRcIlxuICAgICAgYnV0dG9uU3R5bGU9XCJzZWNvbmRhcnlcIlxuICAgICAgY2xhc3NOYW1lPXtiYXNlQ2xhc3N9XG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBvbkNsaWNrPXtzYXZlRHJhZnR9XG4gICAgICByZWY9e3JlZn1cbiAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICA+XG4gICAgICB7bGFiZWx9XG4gICAgPC9Gb3JtU3VibWl0PlxuICApXG59XG5cbnR5cGUgUHJvcHMgPSB7XG4gIEN1c3RvbUNvbXBvbmVudD86IEN1c3RvbVNhdmVEcmFmdEJ1dHRvblByb3BzXG59XG5leHBvcnQgY29uc3QgU2F2ZURyYWZ0OiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBDdXN0b21Db21wb25lbnQgfSkgPT4ge1xuICBjb25zdCB7XG4gICAgcm91dGVzOiB7IGFwaSB9LFxuICAgIHNlcnZlclVSTCxcbiAgfSA9IHVzZUNvbmZpZygpXG4gIGNvbnN0IHsgc3VibWl0IH0gPSB1c2VGb3JtKClcbiAgY29uc3QgeyBpZCwgY29sbGVjdGlvbiwgZ2xvYmFsIH0gPSB1c2VEb2N1bWVudEluZm8oKVxuICBjb25zdCBvcGVyYXRpb24gPSB1c2VPcGVyYXRpb24oKVxuICBjb25zdCBtb2RpZmllZCA9IHVzZUZvcm1Nb2RpZmllZCgpXG5cbiAgY29uc3QgeyBjb2RlOiBsb2NhbGUgfSA9IHVzZUxvY2FsZSgpXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oJ3ZlcnNpb24nKVxuXG4gIGNvbnN0IGNhblNhdmVEcmFmdCA9IG9wZXJhdGlvbiA9PT0gJ3VwZGF0ZScgJiYgbW9kaWZpZWRcblxuICBjb25zdCBzYXZlRHJhZnQgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2VhcmNoID0gYD9sb2NhbGU9JHtsb2NhbGV9JmRlcHRoPTAmZmFsbGJhY2stbG9jYWxlPW51bGwmZHJhZnQ9dHJ1ZWBcbiAgICBsZXQgYWN0aW9uXG4gICAgbGV0IG1ldGhvZCA9ICdQT1NUJ1xuXG4gICAgaWYgKGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjdGlvbiA9IGAke3NlcnZlclVSTH0ke2FwaX0vJHtjb2xsZWN0aW9uLnNsdWd9JHtpZCA/IGAvJHtpZH1gIDogJyd9JHtzZWFyY2h9YFxuICAgICAgaWYgKGlkKSBtZXRob2QgPSAnUEFUQ0gnXG4gICAgfVxuXG4gICAgaWYgKGdsb2JhbCkge1xuICAgICAgYWN0aW9uID0gYCR7c2VydmVyVVJMfSR7YXBpfS9nbG9iYWxzLyR7Z2xvYmFsLnNsdWd9JHtzZWFyY2h9YFxuICAgIH1cblxuICAgIGF3YWl0IHN1Ym1pdCh7XG4gICAgICBhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgX3N0YXR1czogJ2RyYWZ0JyxcbiAgICAgIH0sXG4gICAgICBza2lwVmFsaWRhdGlvbjogdHJ1ZSxcbiAgICB9KVxuICB9LCBbc3VibWl0LCBjb2xsZWN0aW9uLCBnbG9iYWwsIHNlcnZlclVSTCwgYXBpLCBsb2NhbGUsIGlkXSlcblxuICByZXR1cm4gKFxuICAgIDxSZW5kZXJDdXN0b21Db21wb25lbnRcbiAgICAgIEN1c3RvbUNvbXBvbmVudD17Q3VzdG9tQ29tcG9uZW50fVxuICAgICAgRGVmYXVsdENvbXBvbmVudD17RGVmYXVsdFNhdmVEcmFmdEJ1dHRvbn1cbiAgICAgIGNvbXBvbmVudFByb3BzPXt7XG4gICAgICAgIERlZmF1bHRCdXR0b246IERlZmF1bHRTYXZlRHJhZnRCdXR0b24sXG4gICAgICAgIGRpc2FibGVkOiAhY2FuU2F2ZURyYWZ0LFxuICAgICAgICBsYWJlbDogdCgnc2F2ZURyYWZ0JyksXG4gICAgICAgIHNhdmVEcmFmdCxcbiAgICAgIH19XG4gICAgLz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlNhdmVEcmFmdCIsImJhc2VDbGFzcyIsIkRlZmF1bHRTYXZlRHJhZnRCdXR0b24iLCJkaXNhYmxlZCIsImxhYmVsIiwic2F2ZURyYWZ0IiwicmVmIiwidXNlUmVmIiwiZWRpdERlcHRoIiwidXNlRWRpdERlcHRoIiwidXNlSG90a2V5IiwiY21kQ3RybEtleSIsImtleUNvZGVzIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY3VycmVudCIsImNsaWNrIiwiRm9ybVN1Ym1pdCIsImJ1dHRvbklkIiwiYnV0dG9uU3R5bGUiLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwic2l6ZSIsInR5cGUiLCJDdXN0b21Db21wb25lbnQiLCJyb3V0ZXMiLCJhcGkiLCJzZXJ2ZXJVUkwiLCJ1c2VDb25maWciLCJzdWJtaXQiLCJ1c2VGb3JtIiwiaWQiLCJjb2xsZWN0aW9uIiwiZ2xvYmFsIiwidXNlRG9jdW1lbnRJbmZvIiwib3BlcmF0aW9uIiwidXNlT3BlcmF0aW9uIiwibW9kaWZpZWQiLCJ1c2VGb3JtTW9kaWZpZWQiLCJjb2RlIiwibG9jYWxlIiwidXNlTG9jYWxlIiwidCIsInVzZVRyYW5zbGF0aW9uIiwiY2FuU2F2ZURyYWZ0IiwidXNlQ2FsbGJhY2siLCJzZWFyY2giLCJhY3Rpb24iLCJtZXRob2QiLCJzbHVnIiwib3ZlcnJpZGVzIiwiX3N0YXR1cyIsInNraXBWYWxpZGF0aW9uIiwiUmVuZGVyQ3VzdG9tQ29tcG9uZW50IiwiRGVmYXVsdENvbXBvbmVudCIsImNvbXBvbmVudFByb3BzIiwiRGVmYXVsdEJ1dHRvbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFpRWFBOzs7ZUFBQUE7OzsrREFqRThCOzhCQUNaO2tFQUVUO3lCQUNtQjsrREFDbEI7d0JBQ0c7OEJBQ007MkJBQ0g7d0JBQ0g7bUNBQ0c7OEVBQ0s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWxDLE1BQU1DLFlBQVk7QUFZbEIsTUFBTUMseUJBQWdFLENBQUMsRUFDckVDLFFBQVEsRUFDUkMsS0FBSyxFQUNMQyxTQUFTLEVBQ1Y7SUFDQyxNQUFNQyxNQUFNQyxJQUFBQSxhQUFNLEVBQW9CO0lBQ3RDLE1BQU1DLFlBQVlDLElBQUFBLHVCQUFZO0lBRTlCQyxJQUFBQSxrQkFBUyxFQUFDO1FBQUVDLFlBQVk7UUFBTUg7UUFBV0ksVUFBVTtZQUFDO1NBQUk7SUFBQyxHQUFHLENBQUNDO1FBQzNEQSxFQUFFQyxjQUFjO1FBQ2hCRCxFQUFFRSxlQUFlO1FBRWpCLElBQUlaLFVBQVU7WUFDWjtRQUNGO1FBRUEsSUFBSUcsS0FBS1UsU0FBUztZQUNoQlYsSUFBSVUsT0FBTyxDQUFDQyxLQUFLO1FBQ25CO0lBQ0Y7SUFFQSxxQkFDRSw2QkFBQ0MsZUFBVTtRQUNUQyxVQUFTO1FBQ1RDLGFBQVk7UUFDWkMsV0FBV3BCO1FBQ1hFLFVBQVVBO1FBQ1ZtQixTQUFTakI7UUFDVEMsS0FBS0E7UUFDTGlCLE1BQUs7UUFDTEMsTUFBSztPQUVKcEI7QUFHUDtBQUtPLE1BQU1KLFlBQTZCLENBQUMsRUFBRXlCLGVBQWUsRUFBRTtJQUM1RCxNQUFNLEVBQ0pDLFFBQVEsRUFBRUMsR0FBRyxFQUFFLEVBQ2ZDLFNBQVMsRUFDVixHQUFHQyxJQUFBQSxpQkFBUztJQUNiLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGdCQUFPO0lBQzFCLE1BQU0sRUFBRUMsRUFBRSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSw2QkFBZTtJQUNsRCxNQUFNQyxZQUFZQyxJQUFBQSwrQkFBWTtJQUM5QixNQUFNQyxXQUFXQyxJQUFBQSx3QkFBZTtJQUVoQyxNQUFNLEVBQUVDLE1BQU1DLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBUztJQUNsQyxNQUFNLEVBQUVDLENBQUMsRUFBRSxHQUFHQyxJQUFBQSw0QkFBYyxFQUFDO0lBRTdCLE1BQU1DLGVBQWVULGNBQWMsWUFBWUU7SUFFL0MsTUFBTWpDLFlBQVl5QyxJQUFBQSxrQkFBVyxFQUFDO1FBQzVCLE1BQU1DLFNBQVMsQ0FBQyxRQUFRLEVBQUVOLE9BQU8sd0NBQXdDLENBQUM7UUFDMUUsSUFBSU87UUFDSixJQUFJQyxTQUFTO1FBRWIsSUFBSWhCLFlBQVk7WUFDZGUsU0FBUyxDQUFDLEVBQUVwQixVQUFVLEVBQUVELElBQUksQ0FBQyxFQUFFTSxXQUFXaUIsSUFBSSxDQUFDLEVBQUVsQixLQUFLLENBQUMsQ0FBQyxFQUFFQSxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUVlLE9BQU8sQ0FBQztZQUM5RSxJQUFJZixJQUFJaUIsU0FBUztRQUNuQjtRQUVBLElBQUlmLFFBQVE7WUFDVmMsU0FBUyxDQUFDLEVBQUVwQixVQUFVLEVBQUVELElBQUksU0FBUyxFQUFFTyxPQUFPZ0IsSUFBSSxDQUFDLEVBQUVILE9BQU8sQ0FBQztRQUMvRDtRQUVBLE1BQU1qQixPQUFPO1lBQ1hrQjtZQUNBQztZQUNBRSxXQUFXO2dCQUNUQyxTQUFTO1lBQ1g7WUFDQUMsZ0JBQWdCO1FBQ2xCO0lBQ0YsR0FBRztRQUFDdkI7UUFBUUc7UUFBWUM7UUFBUU47UUFBV0Q7UUFBS2M7UUFBUVQ7S0FBRztJQUUzRCxxQkFDRSw2QkFBQ3NCLDhCQUFxQjtRQUNwQjdCLGlCQUFpQkE7UUFDakI4QixrQkFBa0JyRDtRQUNsQnNELGdCQUFnQjtZQUNkQyxlQUFldkQ7WUFDZkMsVUFBVSxDQUFDMEM7WUFDWHpDLE9BQU91QyxFQUFFO1lBQ1R0QztRQUNGOztBQUdOIn0=