"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _useDebounce = /*#__PURE__*/ _interop_require_default(require("../../../../hooks/useDebounce"));
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../../utilities/RenderCustomComponent"));
const _Button = /*#__PURE__*/ _interop_require_default(require("../../Button"));
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../../ReactSelect"));
const _Date = /*#__PURE__*/ _interop_require_default(require("./Date"));
const _Number = /*#__PURE__*/ _interop_require_default(require("./Number"));
const _Relationship = /*#__PURE__*/ _interop_require_default(require("./Relationship"));
const _Select = require("./Select");
const _Text = /*#__PURE__*/ _interop_require_default(require("./Text"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const valueFields = {
    Date: _Date.default,
    Number: _Number.default,
    Relationship: _Relationship.default,
    Select: _Select.Select,
    Text: _Text.default
};
const baseClass = 'condition';
const Condition = (props)=>{
    const { andIndex, dispatch, fields, orIndex, value } = props;
    const fieldName = Object.keys(value)[0];
    const [activeField, setActiveField] = (0, _react.useState)(()=>fields.find((field)=>fieldName === field.value));
    const operatorAndValue = value?.[fieldName] ? Object.entries(value[fieldName])[0] : undefined;
    const queryValue = operatorAndValue?.[1];
    const operatorValue = operatorAndValue?.[0];
    const [internalValue, setInternalValue] = (0, _react.useState)(queryValue);
    const [internalOperatorField, setInternalOperatorField] = (0, _react.useState)(operatorValue);
    const debouncedValue = (0, _useDebounce.default)(internalValue, 300);
    (0, _react.useEffect)(()=>{
        const newActiveField = fields.find(({ value: name })=>name === fieldName);
        if (newActiveField && newActiveField !== activeField) {
            setActiveField(newActiveField);
            setInternalOperatorField(null);
            setInternalValue('');
        }
    }, [
        fieldName,
        fields,
        activeField
    ]);
    (0, _react.useEffect)(()=>{
        dispatch({
            type: 'update',
            andIndex,
            orIndex,
            value: debouncedValue || ''
        });
    }, [
        debouncedValue,
        dispatch,
        orIndex,
        andIndex
    ]);
    const booleanSelect = [
        'exists'
    ].includes(operatorValue) || activeField.props.type === 'checkbox';
    const ValueComponent = booleanSelect ? _Select.Select : valueFields[activeField?.component] || valueFields.Text;
    let valueOptions;
    if (booleanSelect) {
        valueOptions = [
            'true',
            'false'
        ];
    } else if (activeField?.props && 'options' in activeField.props) {
        valueOptions = activeField.props.options;
    }
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__inputs`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__field`
    }, /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        isClearable: false,
        onChange: (field)=>{
            dispatch({
                type: 'update',
                andIndex,
                field: field?.value,
                orIndex
            });
        },
        options: fields,
        value: fields.find((field)=>fieldName === field.value)
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__operator`
    }, /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        disabled: !fieldName,
        isClearable: false,
        onChange: (operator)=>{
            dispatch({
                type: 'update',
                andIndex,
                operator: operator.value,
                orIndex
            });
            setInternalOperatorField(operator.value);
        },
        options: activeField.operators,
        value: activeField.operators.find((operator)=>internalOperatorField === operator.value) || null
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__value`
    }, /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: activeField?.props?.admin?.components?.Filter,
        DefaultComponent: ValueComponent,
        componentProps: {
            ...activeField?.props,
            disabled: !operatorValue,
            onChange: setInternalValue,
            operator: operatorValue,
            options: valueOptions,
            value: internalValue
        }
    }))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__actions`
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__actions-remove`,
        icon: "x",
        iconStyle: "with-border",
        onClick: ()=>dispatch({
                type: 'remove',
                andIndex,
                orIndex
            }),
        round: true
    }), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__actions-add`,
        icon: "plus",
        iconStyle: "with-border",
        onClick: ()=>dispatch({
                type: 'add',
                andIndex: andIndex + 1,
                field: fields[0].value,
                orIndex,
                relation: 'and'
            }),
        round: true
    }))));
};
const _default = Condition;

//# sourceMappingURL=data:application/json;base64,