"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../../hooks/usePayloadAPI"));
const _buildStateFromSchema = /*#__PURE__*/ _interop_require_default(require("../../../forms/Form/buildStateFromSchema"));
const _fieldtypes = require("../../../forms/field-types");
const _Auth = require("../../../utilities/Auth");
const _Config = require("../../../utilities/Config");
const _DocumentInfo = require("../../../utilities/DocumentInfo");
const _EditDepth = require("../../../utilities/EditDepth");
const _FormQueryParams = require("../../../utilities/FormQueryParams");
const _Locale = require("../../../utilities/Locale");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../../utilities/RenderCustomComponent"));
const _NotFound = /*#__PURE__*/ _interop_require_default(require("../../NotFound"));
const _Default = /*#__PURE__*/ _interop_require_default(require("./Default"));
const _formatFields = /*#__PURE__*/ _interop_require_default(require("./formatFields"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const EditView = (props)=>{
    const { collection: incomingCollection, isEditing } = props;
    const { slug: collectionSlug, admin: { components: { views: { Edit } = {} } = {} } = {} } = incomingCollection;
    const [fields] = (0, _react.useState)(()=>(0, _formatFields.default)(incomingCollection, isEditing));
    const [collection] = (0, _react.useState)(()=>({
            ...incomingCollection,
            fields
        }));
    const [redirect, setRedirect] = (0, _react.useState)();
    const [formQueryParams, setFormQueryParams] = (0, _react.useState)({
        depth: 0,
        'fallback-locale': 'null',
        locale: '',
        uploadEdits: undefined
    });
    const formattedQueryParams = _qs.default.stringify(formQueryParams);
    const { code: locale } = (0, _Locale.useLocale)();
    const config = (0, _Config.useConfig)();
    const { routes: { admin, api }, serverURL } = config;
    const { params: { id } = {} } = (0, _reactrouterdom.useRouteMatch)();
    const history = (0, _reactrouterdom.useHistory)();
    const [internalState, setInternalState] = (0, _react.useState)();
    const [updatedAt, setUpdatedAt] = (0, _react.useState)();
    const { permissions, user } = (0, _Auth.useAuth)();
    const userRef = (0, _react.useRef)(user);
    const { docPermissions, getDocPermissions, getDocPreferences, getVersions } = (0, _DocumentInfo.useDocumentInfo)();
    const { t } = (0, _reacti18next.useTranslation)('general');
    const [{ data, isError, isLoading: isLoadingData }, { refetchData }] = (0, _usePayloadAPI.default)(isEditing ? `${serverURL}${api}/${collectionSlug}/${id}` : '', {
        initialData: null,
        initialParams: {
            depth: 0,
            draft: 'true',
            'fallback-locale': 'null'
        }
    });
    const buildState = (0, _react.useCallback)(async (doc, overrides)=>{
        const preferences = await getDocPreferences();
        const state = await (0, _buildStateFromSchema.default)({
            id,
            config,
            data: doc || {},
            fieldSchema: overrides?.fieldSchema,
            locale,
            operation: 'update',
            preferences,
            t,
            user: userRef.current,
            ...overrides
        });
        setInternalState(state);
    }, [
        getDocPreferences,
        id,
        locale,
        t,
        config
    ]);
    const onSave = (0, _react.useCallback)(async (json)=>{
        getVersions();
        getDocPermissions();
        setUpdatedAt(json?.doc?.updatedAt);
        if (!isEditing) {
            setRedirect(`${admin}/collections/${collection.slug}/${json?.doc?.id}`);
        } else {
            buildState(json.doc, {
                fieldSchema: collection.fields
            });
            setFormQueryParams((params)=>({
                    ...params,
                    uploadEdits: undefined
                }));
        }
    }, [
        admin,
        getVersions,
        isEditing,
        buildState,
        getDocPermissions,
        collection
    ]);
    (0, _react.useEffect)(()=>{
        if (fields && (isEditing ? data : true)) {
            const awaitInternalState = async ()=>{
                setUpdatedAt(data?.updatedAt);
                buildState(data, {
                    fieldSchema: fields,
                    operation: isEditing ? 'update' : 'create'
                });
            };
            awaitInternalState();
        }
    }, [
        isEditing,
        data,
        buildState,
        fields
    ]);
    (0, _react.useEffect)(()=>{
        if (redirect) {
            history.push(redirect);
        }
    }, [
        history,
        redirect
    ]);
    (0, _react.useEffect)(()=>{
        setFormQueryParams((params)=>({
                ...params,
                locale
            }));
    }, [
        locale
    ]);
    (0, _react.useEffect)(()=>{
        if (history.location.state?.refetchDocumentData) {
            void refetchData();
        }
    }, [
        history.location.state?.refetchDocumentData,
        refetchData
    ]);
    if (isError) {
        return /*#__PURE__*/ _react.default.createElement(_NotFound.default, {
            marginTop: "large"
        });
    }
    const apiURL = `${serverURL}${api}/${collectionSlug}/${id}?locale=${locale}${collection.versions.drafts ? '&draft=true' : ''}`;
    const action = `${serverURL}${api}/${collectionSlug}${isEditing ? `/${id}` : ''}?${formattedQueryParams}`;
    const hasSavePermission = isEditing && docPermissions?.update?.permission || !isEditing && docPermissions?.create?.permission;
    const isLoading = !internalState || !docPermissions || isLoadingData;
    const componentProps = {
        id,
        action,
        apiURL,
        canAccessAdmin: permissions?.canAccessAdmin,
        collection,
        data,
        fieldTypes: _fieldtypes.fieldTypes,
        hasSavePermission,
        internalState,
        isEditing,
        isLoading,
        onSave,
        permissions: docPermissions,
        updatedAt: updatedAt || data?.updatedAt,
        user
    };
    return /*#__PURE__*/ _react.default.createElement(_EditDepth.EditDepthContext.Provider, {
        value: 1
    }, /*#__PURE__*/ _react.default.createElement(_FormQueryParams.FormQueryParams.Provider, {
        value: {
            formQueryParams,
            setFormQueryParams
        }
    }, /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: typeof Edit === 'function' ? Edit : undefined,
        DefaultComponent: _Default.default,
        componentProps: componentProps
    })));
};
const _default = EditView;

//# sourceMappingURL=data:application/json;base64,